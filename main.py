import telebot
from telebot import types

# üîë –¢–í–û–ò –î–ê–ù–ù–´–ï
TOKEN = "8301682057:AAFNA8W88VhAp9pRMdb8MBYScUOx1PbdOSQ"
ADMIN_ID = 8183780518  # –ø—Ä–∏–º–µ—Ä: 512345678

bot = telebot.TeleBot(TOKEN)
user_data = {}

# ---------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ----------
def main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
    btn2 = types.KeyboardButton("‚ÑπÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã")
    btn3 = types.KeyboardButton("üíä –ü–æ–º–æ—â—å")
    markup.add(btn1)
    markup.add(btn2, btn3)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# ---------- –ö–æ–º–∞–Ω–¥–∞ /start ----------
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –º—ã –≤–∞–º –ø–æ–º–æ–∂–µ–º –∑–∞–∫–∞–∑–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ .")
    main_menu(message.chat.id)

# ---------- –ö–æ–Ω—Ç–∞–∫—Ç—ã ----------
@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã")
def contacts(message):
    bot.send_message(message.chat.id, "üìû –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è: @ingotiv_228\nüè™")

# ---------- –ü–æ–º–æ—â—å ----------
@bot.message_handler(func=lambda message: message.text == "üíä –ü–æ–º–æ—â—å")
def help(message):
    bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –∏ —Å–ª–µ–¥—É–π—Ç–µ —à–∞–≥–∞–º.")

# ---------- –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ ----------
@bot.message_handler(func=lambda message: message.text == "üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
def make_order(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ üíä:")
    user_data[message.chat.id] = {'step': 'medicine'}

# ---------- –≠—Ç–∞–ø—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ----------
@bot.message_handler(func=lambda message: message.chat.id in user_data)
def handle_order(message):
    chat_id = message.chat.id
    step = user_data[chat_id]['step']

    if step == 'medicine':
        user_data[chat_id]['medicine'] = message.text
        bot.send_message(chat_id, "üèôÔ∏è –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?")
        user_data[chat_id]['step'] = 'city'

    elif step == 'city':
        user_data[chat_id]['city'] = message.text
        bot.send_message(chat_id, "üì¶ –°–∫–æ–ª—å–∫–æ —É–ø–∞–∫–æ–≤–æ–∫ –Ω—É–∂–Ω–æ?")
        user_data[chat_id]['step'] = 'quantity'

    elif step == 'quantity':
        user_data[chat_id]['quantity'] = message.text
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç Telegram –∏–ª–∏ –æ—Ç Whatsapp —á—Ç–æ –±—ã –º—ã –º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è üìû:")
        user_data[chat_id]['step'] = 'phone'

    elif step == 'phone':
        user_data[chat_id]['phone'] = message.text
        confirm_order(chat_id)

# ---------- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ----------
def confirm_order(chat_id):
    order = user_data[chat_id]
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"))
    markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))

    bot.send_message(chat_id,
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫–∞–∑:\n\n"
        f"üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–æ: {order['medicine']}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {order['city']}\n"
        f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order['quantity']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –µ—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ üëá",
        reply_markup=markup
    )

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ----------
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    chat_id = call.message.chat.id
    if call.data == "confirm":
        order = user_data.get(chat_id)
        if order:
            send_order_to_admin(order, chat_id)
            bot.send_message(chat_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            user_data.pop(chat_id, None)
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        main_menu(chat_id)

    elif call.data == "cancel":
        bot.send_message(chat_id, "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
        user_data.pop(chat_id, None)
        main_menu(chat_id)

# ---------- –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω—É ----------
def send_order_to_admin(order, chat_id):
    msg = (
        f"üì¨ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n"
        f"üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–æ: *{order['medicine']}*\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: *{order['city']}*\n"
        f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{order['quantity']}*\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: *{order['phone']}*\n"
        f"üë§ ID –∫–ª–∏–µ–Ω—Ç–∞: `{chat_id}`"
    )
    bot.send_message(ADMIN_ID, msg, parse_mode="Markdown")

# ---------- –ó–∞–ø—É—Å–∫ ----------
bot.polling(none_stop=True)


# --- –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∂–∏–≤—ã–º (–¥–ª—è Replit –∏–ª–∏ —Ö–æ—Å—Ç–∏–Ω–≥–∞) ---
from flask import Flask
from threading import Thread

app = Flask('')

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

keep_alive()
